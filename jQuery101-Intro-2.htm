<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
    <title>jQuery 101 - Introduction</title>
    <link href="styles.css" rel="stylesheet" type="text/css" />
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js" type="text/javascript"></script>
    <script src="common.js" type="text/javascript"></script>
</head>

<body>
    <div id="arrow"></div>
    <div id="pageHeader">jQuery 101 - Making JavaScript Fun Again</div>
    <div id="topic">Why jQuery?</div>
    <ul>
    	<li id="main" data-notes="There are several reasons to use JavaSript to handle client-side DOM manipulation.">
			<p><img src="list.png" class="notes" /> What's So Special About jQuery?</p>
			<ul>
				<li id="sub1" class="hiddenListitem" data-notes="Normally, we'd use event-handling declarations via JavaScript.">
					<div><img src="list.png" class="notes" /> Easily Create Interactive Sites</div>
				</li>
				<li id="sub2" class="hiddenListitem" data-notes="">
					<div><img src="list.png" class="notes" /> No Need to be a JavaScript Expert (Gateway)</div>
				</li>
				<li id="sub3" class="hiddenListitem" data-notes="You can learn a lot about JavaScript (and best practices) from looking at the (non-minified) code.">
					<div><img src="list.png" class="notes" /> Great to Learn From</div>
				</li>
				<li id="sub4" class="hiddenListitem" data-notes="Although some edge cases aren't always handled correctly, it works 99.5% of the time.">
					<div><img src="list.png" class="notes" /> Cross-Browser Abstraction (HUGE!!!)</div>
				</li>
				<li id="sub5" class="hiddenListitem" data-notes="Extending the benefits of CSS for separating styling from markup, jQuery also makes it easy to separate client-side code from your markup.">
					<div><img src="list.png" class="notes" /> Promotes Unobstrusive Code & Separation of Concerns</div>
				</li>
				<li id="sub6" class="hiddenListitem" data-notes="As you’ll see, because each jQuery API call returns the wrapped set of selected objects, it’s easy to chain multiple API calls.">
					<div><img src="list.png" class="notes" /> Fluid Syntax</div>
				</li>
				<li id="sub7" class="hiddenListitem" data-notes="Since this is client-side technology, and AJAX use does not care how it's supported on the server side, it does not matter what technology is used for building a website. jQuery can be put to full use on the client side.">
					<div><img src="list.png" class="notes" /> Use for Any Web App</div>
				</li>
				<li id="sub8" class="hiddenListitem" data-notes="Microsoft now officially supports jQuery (thanks to their use of it in ASP.NET MVC). In fact, and it replaces the MS AJAX Toolkit in many respects, and Microsoft is even contributing to it now (ex: templates).">
					<div><img src="list.png" class="notes" /> Large Market Acceptance & Microsoft Support</div>
				</li>
				<li id="sub9" class="hiddenListitem" data-notes="">
					<div><img src="list.png" class="notes" /> Best Community Support</div>
				</li>
				<li id="sub10" class="hiddenListitem" data-notes="Thousands, including jQueryUI.">
					<div><img src="list.png" class="notes" /> Tremendous Plugin Ecosystem</div>
				</li>
				<li id="sub11" class="hiddenListitem" data-notes="Best documentation I've seen for an open source project, bar none. Reflects passion for the product.">
					<div><img src="list.png" class="notes" /> Great Documentation</div>
				</li>
			</ul>
		</li>
    <ul>
	<div id="code" class="column"></div>
	<div id="info" class="column"></div>
    <div id="navPrev"><<< Previous</div>
    <div id="navNext">Next >>></div>
    <div id="notes"></div>
</body>

</html>

<script type="text/javascript">
	var prev = "jQuery101-Intro-1.htm";
	var next = "jQuery101-Intro-3.htm";

	function displayCode(id) {
		var code = "";
		$("#code").hide();

		switch (id) {
		}

		if (code != "") $("#code").html(code).show();
	}
</script>
